import { GetLanguagesResponse, ConfigOptions, Text, TranslateOptions, TransliterateOptions, BreakSentenceOptions, DictinaryLookupOptions, DictinaryExampleData, DictionaryExampleOptions } from './ms-text-translator.types';
export declare class MsTextTranslator {
    private readonly config;
    private api;
    constructor(config: ConfigOptions);
    getLanguages<Scope extends keyof GetLanguagesResponse>(scopes?: Scope[]): Promise<Pick<GetLanguagesResponse, Scope>>;
    translate(data: Text[], options: TranslateOptions): Promise<{
        detectedLanguage?: {
            language: string;
            score: number;
        } | undefined;
        translations: [{
            to: string;
            text: string;
            alignment?: {
                proj: string;
            } | undefined;
            sentLen?: {
                srcSentLen: number[];
                transSentLen: number[];
            } | undefined;
            transliteration?: {
                script: string;
                text: string;
            } | undefined;
        }];
        sourceText?: {
            text: string;
        } | undefined;
    }[]>;
    transliterate(data: Text[], options: TransliterateOptions): Promise<{
        text: string;
        script: string;
    }[]>;
    detectLanguage(data: Text[]): Promise<({
        language: string;
        score: number;
        isTranslationSupported: boolean;
        isTransliterationSupported: boolean;
    } & {
        alternatives: {
            language: string;
            score: number;
            isTranslationSupported: boolean;
            isTransliterationSupported: boolean;
        }[];
    })[]>;
    breakSentence(data: Text[], options?: BreakSentenceOptions): Promise<{
        sentenceLengths: number[];
        detectedLanguage?: {
            language: string;
            score: number;
        } | undefined;
    }[]>;
    lookupDictionary(data: Text[], options: DictinaryLookupOptions): Promise<{
        normalizedSource: string;
        displaySource: string;
        translations: {
            normalizedTarget: string;
            displayTarget: string;
            posTag: string;
            confidence: number;
            prefixWord: string;
            backTranslations: {
                normalizedText: string;
                displayText: string;
                numExamples: string;
                frequencyCount: number;
            }[];
        }[];
    }[]>;
    dictionaryExamples(data: DictinaryExampleData[], options: DictionaryExampleOptions): Promise<{
        normalizedSource: string;
        normalizedTarget: string;
        examples: {
            sourcePrefix: string;
            sourceTerm: string;
            sourceSuffix: string;
            targetPrefix: string;
            targetTerm: string;
            targetSuffix: string;
        }[];
    }[]>;
    private makeRequest;
    private makeHeaders;
}
