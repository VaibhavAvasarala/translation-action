"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const qs = require("qs");
const uuidv4 = require("uuid/v4");
const BASE_URL = 'https://api.cognitive.microsofttranslator.com';
class MsTextTranslator {
    constructor(config) {
        this.config = config;
        this.api = axios_1.default.create({
            baseURL: BASE_URL,
            params: {
                'api-version': '3.0',
            },
            headers: {
                'Ocp-Apim-Subscription-Key': this.config.credentials.subscriptionKey,
                'Content-Type': 'application/json',
            },
        });
    }
    getLanguages(scopes = ['translation', 'transliteration', 'dictionary']) {
        return __awaiter(this, void 0, void 0, function* () {
            let params = {};
            if (scopes.length) {
                params = Object.assign(Object.assign({}, params), { scope: scopes.join(',') });
            }
            const response = yield this.api.get('languages', {
                params,
                headers: this.makeHeaders(),
            });
            return response.data;
        });
    }
    translate(data, options) {
        return this.makeRequest('translate', data, options);
    }
    transliterate(data, options) {
        return this.makeRequest('transliterate', data, options);
    }
    detectLanguage(data) {
        return this.makeRequest('detect', data);
    }
    breakSentence(data, options = {}) {
        return this.makeRequest('breaksentence', data, options);
    }
    lookupDictionary(data, options) {
        return this.makeRequest('dictionary/lookup', data, options);
    }
    dictionaryExamples(data, options) {
        return this.makeRequest('dictionary/examples', data, options);
    }
    makeRequest(op, data, params = {}, request = this.api.post) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield request(op, data, {
                params,
                headers: this.makeHeaders(),
                paramsSerializer: function (p) {
                    return qs.stringify(p, { arrayFormat: 'repeat' });
                },
            });
            return response.data;
        });
    }
    makeHeaders() {
        return {
            'X-ClientTraceId': uuidv4().toString(),
        };
    }
}
exports.MsTextTranslator = MsTextTranslator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXMtdGV4dC10cmFuc2xhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21zLXRleHQtdHJhbnNsYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLGlDQUE2QztBQUM3Qyx5QkFBeUI7QUFDekIsa0NBQWtDO0FBbUJsQyxNQUFNLFFBQVEsR0FBRywrQ0FBK0MsQ0FBQztBQUVqRSxNQUFhLGdCQUFnQjtJQUczQixZQUE2QixNQUFxQjtRQUFyQixXQUFNLEdBQU4sTUFBTSxDQUFlO1FBQ2hELElBQUksQ0FBQyxHQUFHLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsUUFBUTtZQUNqQixNQUFNLEVBQUU7Z0JBQ04sYUFBYSxFQUFFLEtBQUs7YUFDckI7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZTtnQkFDcEUsY0FBYyxFQUFFLGtCQUFrQjthQUNuQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFSyxZQUFZLENBQ2hCLFNBQWtCLENBQUMsYUFBYSxFQUFFLGlCQUFpQixFQUFFLFlBQVksQ0FBWTs7WUFFN0UsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDakIsTUFBTSxtQ0FDRCxNQUFNLEtBQ1QsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQ3hCLENBQUM7YUFDSDtZQUNELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQW9DLFdBQVcsRUFBRTtnQkFDbEYsTUFBTTtnQkFDTixPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTthQUM1QixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsQ0FBQztLQUFBO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxPQUF5QjtRQUMvQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQW9CLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFZLEVBQUUsT0FBNkI7UUFDdkQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUF3QixlQUFlLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxjQUFjLENBQUMsSUFBWTtRQUN6QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQXlCLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQVksRUFBRSxVQUFnQyxFQUFFO1FBQzVELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBd0IsZUFBZSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsSUFBWSxFQUFFLE9BQStCO1FBQzVELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBMkIsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUE0QixFQUFFLE9BQWlDO1FBQ2hGLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBNEIscUJBQXFCLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFYSxXQUFXLENBQVksRUFBVSxFQUFFLElBQVMsRUFBRSxTQUFpQixFQUFFLEVBQUUsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSTs7WUFDdEcsTUFBTSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQVksRUFBRSxFQUFFLElBQUksRUFBRTtnQkFDbEQsTUFBTTtnQkFDTixPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDM0IsZ0JBQWdCLEVBQUUsVUFBUyxDQUFDO29CQUMxQixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ3BELENBQUM7YUFDRixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsQ0FBQztLQUFBO0lBQ08sV0FBVztRQUNqQixPQUFPO1lBQ0wsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO1NBQ3ZDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUF4RUQsNENBd0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7IEF4aW9zSW5zdGFuY2UgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgKiBhcyBxcyBmcm9tICdxcyc7XG5pbXBvcnQgKiBhcyB1dWlkdjQgZnJvbSAndXVpZC92NCc7XG5pbXBvcnQge1xuICBHZXRMYW5ndWFnZXNSZXNwb25zZSxcbiAgQ29uZmlnT3B0aW9ucyxcbiAgVGV4dCxcbiAgVHJhbnNsYXRlT3B0aW9ucyxcbiAgVHJhbnNsYXRlUmVzcG9uc2UsXG4gIFRyYW5zbGl0ZXJhdGVPcHRpb25zLFxuICBCcmVha1NlbnRlbmNlT3B0aW9ucyxcbiAgRGV0ZWN0TGFuZ3VhZ2VSZXNwb25zZSxcbiAgRGljdGluYXJ5TG9va3VwT3B0aW9ucyxcbiAgRGljdGlvbmFyeUxvb2t1cFJlc3BvbnNlLFxuICBCcmVha1NlbnRlbmNlUmVzcG9uc2UsXG4gIFRyYW5zbGl0ZXJhdGVSZXNwb25zZSxcbiAgRGljdGluYXJ5RXhhbXBsZURhdGEsXG4gIERpY3Rpb25hcnlFeGFtcGxlT3B0aW9ucyxcbiAgRGljdGluYXJ5RXhhbXBsZXNSZXNwb25zZSxcbn0gZnJvbSAnLi9tcy10ZXh0LXRyYW5zbGF0b3IudHlwZXMnO1xuXG5jb25zdCBCQVNFX1VSTCA9ICdodHRwczovL2FwaS5jb2duaXRpdmUubWljcm9zb2Z0dHJhbnNsYXRvci5jb20nO1xuXG5leHBvcnQgY2xhc3MgTXNUZXh0VHJhbnNsYXRvciB7XG4gIHByaXZhdGUgYXBpOiBBeGlvc0luc3RhbmNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBDb25maWdPcHRpb25zKSB7XG4gICAgdGhpcy5hcGkgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgYmFzZVVSTDogQkFTRV9VUkwsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgJ2FwaS12ZXJzaW9uJzogJzMuMCcsXG4gICAgICB9LFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnT2NwLUFwaW0tU3Vic2NyaXB0aW9uLUtleSc6IHRoaXMuY29uZmlnLmNyZWRlbnRpYWxzLnN1YnNjcmlwdGlvbktleSxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBnZXRMYW5ndWFnZXM8U2NvcGUgZXh0ZW5kcyBrZXlvZiBHZXRMYW5ndWFnZXNSZXNwb25zZT4oXG4gICAgc2NvcGVzOiBTY29wZVtdID0gWyd0cmFuc2xhdGlvbicsICd0cmFuc2xpdGVyYXRpb24nLCAnZGljdGlvbmFyeSddIGFzIFNjb3BlW11cbiAgKSB7XG4gICAgbGV0IHBhcmFtcyA9IHt9O1xuICAgIGlmIChzY29wZXMubGVuZ3RoKSB7XG4gICAgICBwYXJhbXMgPSB7XG4gICAgICAgIC4uLnBhcmFtcyxcbiAgICAgICAgc2NvcGU6IHNjb3Blcy5qb2luKCcsJyksXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpLmdldDxQaWNrPEdldExhbmd1YWdlc1Jlc3BvbnNlLCBTY29wZT4+KCdsYW5ndWFnZXMnLCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBoZWFkZXJzOiB0aGlzLm1ha2VIZWFkZXJzKCksXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH1cblxuICB0cmFuc2xhdGUoZGF0YTogVGV4dFtdLCBvcHRpb25zOiBUcmFuc2xhdGVPcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMubWFrZVJlcXVlc3Q8VHJhbnNsYXRlUmVzcG9uc2U+KCd0cmFuc2xhdGUnLCBkYXRhLCBvcHRpb25zKTtcbiAgfVxuXG4gIHRyYW5zbGl0ZXJhdGUoZGF0YTogVGV4dFtdLCBvcHRpb25zOiBUcmFuc2xpdGVyYXRlT3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0PFRyYW5zbGl0ZXJhdGVSZXNwb25zZT4oJ3RyYW5zbGl0ZXJhdGUnLCBkYXRhLCBvcHRpb25zKTtcbiAgfVxuXG4gIGRldGVjdExhbmd1YWdlKGRhdGE6IFRleHRbXSkge1xuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0PERldGVjdExhbmd1YWdlUmVzcG9uc2U+KCdkZXRlY3QnLCBkYXRhKTtcbiAgfVxuXG4gIGJyZWFrU2VudGVuY2UoZGF0YTogVGV4dFtdLCBvcHRpb25zOiBCcmVha1NlbnRlbmNlT3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMubWFrZVJlcXVlc3Q8QnJlYWtTZW50ZW5jZVJlc3BvbnNlPignYnJlYWtzZW50ZW5jZScsIGRhdGEsIG9wdGlvbnMpO1xuICB9XG5cbiAgbG9va3VwRGljdGlvbmFyeShkYXRhOiBUZXh0W10sIG9wdGlvbnM6IERpY3RpbmFyeUxvb2t1cE9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5tYWtlUmVxdWVzdDxEaWN0aW9uYXJ5TG9va3VwUmVzcG9uc2U+KCdkaWN0aW9uYXJ5L2xvb2t1cCcsIGRhdGEsIG9wdGlvbnMpO1xuICB9XG5cbiAgZGljdGlvbmFyeUV4YW1wbGVzKGRhdGE6IERpY3RpbmFyeUV4YW1wbGVEYXRhW10sIG9wdGlvbnM6IERpY3Rpb25hcnlFeGFtcGxlT3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0PERpY3RpbmFyeUV4YW1wbGVzUmVzcG9uc2U+KCdkaWN0aW9uYXJ5L2V4YW1wbGVzJywgZGF0YSwgb3B0aW9ucyk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIG1ha2VSZXF1ZXN0PFRSZXNwb25zZT4ob3A6IHN0cmluZywgZGF0YTogYW55LCBwYXJhbXM6IG9iamVjdCA9IHt9LCByZXF1ZXN0ID0gdGhpcy5hcGkucG9zdCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdDxUUmVzcG9uc2U+KG9wLCBkYXRhLCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBoZWFkZXJzOiB0aGlzLm1ha2VIZWFkZXJzKCksXG4gICAgICBwYXJhbXNTZXJpYWxpemVyOiBmdW5jdGlvbihwKSB7XG4gICAgICAgIHJldHVybiBxcy5zdHJpbmdpZnkocCwgeyBhcnJheUZvcm1hdDogJ3JlcGVhdCcgfSk7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9XG4gIHByaXZhdGUgbWFrZUhlYWRlcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdYLUNsaWVudFRyYWNlSWQnOiB1dWlkdjQoKS50b1N0cmluZygpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==